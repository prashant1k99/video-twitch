datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

model User {
  id             String   @id @unique @default(uuid())
  username       String   @unique
  imageUrl       String   @db.Text
  bio            String?  @db.Text
  follows        Follow[] @relation("Follower")
  followedBy     Follow[] @relation("Followee")
  blocked        Block[]  @relation("Blocker")
  blockedBy      Block[]  @relation("Blockee")
  stream         Stream?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Follow {
  id         String   @id @default(uuid())
  follower   User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followee   User     @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([followerId, followeeId])
  @@index([followerId])
  @@index([followeeId])
}

model Block {
  id         String   @id @default(uuid())
  blocker    User     @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId  String
  blockee    User     @relation("Blockee", fields: [blockeeId], references: [id], onDelete: Cascade)
  blockeeId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([blockerId, blockeeId])
  @@index([blockerId])
  @@index([blockeeId])
}

model Stream {
  id                  String   @id @default(uuid())
  name                String
  thumbnailUrl        String?   @db.Text

  ingressId           String?  @unique
  serverUrl           String?  @db.Text
  streamKey           String?  @db.Text

  isLive              Boolean  @default(false)
  isChatEnabled       Boolean  @default(true)
  isChatDelayed       Boolean  @default(false)
  isChatFollowersOnly Boolean  @default(false)

  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}